{"version":3,"sources":["SpecialComponent/spinner.js","component/Card.js","Services/Endpoint.js","Services/index.js","component/CovidNormal.js","Routes/index.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","className","convert","labelValue","Math","abs","Number","toFixed","CardMade","tag","total","today","Card","CardContent","Endpoint","Index","country","console","log","Axios","get","API_COUNTRY","API_ALL","Alert","props","elevation","variant","CovidNormal","state","countries","all","selectedLocation","open","error","handleChange","e","countryName","target","value","setState","serv","Service","then","success","data","catch","countryParam","handleClose","ctx","this","weight","temp","i","length","j","cases","response","message","Select","labelId","id","onChange","MenuItem","map","ele","key","countryInfo","iso2","Fragment","todayCases","todayRecovered","recovered","todayDeaths","deaths","Paper","elements","ref","Snackbar","autoHideDuration","onClose","severity","React","Component","useEffect","exact","path","component","render","to","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8RAWeA,MATf,WACI,OACI,yBAAKC,UAAU,qBACX,yBAAKA,UAAU,qB,kBC2B3B,SAASC,EAAQC,GAGb,OAAOC,KAAKC,IAAIC,OAAOH,KAAgB,KAEpCC,KAAKC,IAAIC,OAAOH,IAAe,KAAQI,QAAQ,GAAK,IAErDH,KAAKC,IAAIC,OAAOH,KAAgB,KAE/BC,KAAKC,IAAIC,OAAOH,IAAe,KAAQI,QAAQ,GAAK,IAErDH,KAAKC,IAAIC,OAAOH,KAAgB,KAE/BC,KAAKC,IAAIC,OAAOH,IAAe,KAASI,QAAQ,GAAI,IAErDH,KAAKC,IAAIC,OAAOH,IAIPK,MAhDf,YAAyC,IAArBC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,MAAMC,EAAS,EAATA,MAG3B,OAEI,kBAACC,EAAA,EAAD,CAAMX,UAAU,gBACZ,kBAACY,EAAA,EAAD,KACQ,yBAAKZ,UAAU,SACdQ,GAID,yBAAKR,UAAU,qBAAf,IACEC,EAAQS,IAGV,yBAAKV,UAAU,eAAf,SACOC,EAAQQ,O,iBCpBxBI,EAAS,CAEpBA,YAAqB,4CACrBA,QAAiB,sCCeFC,E,qGAdMC,GAEL,OADAC,QAAQC,IAAIF,GACLG,IAAMC,IAAIN,EAASO,YAAYL,K,4BAItC,OAAOG,IAAMC,IAAIN,EAASQ,a,yDCM1C,SAASC,EAAMC,GACb,OAAO,kBAAC,IAAD,eAAUC,UAAW,EAAGC,QAAQ,UAAaF,I,IA4KvCG,E,4MAvKbC,MAAQ,CACNC,UAAW,GACXC,IAAK,GACLC,iBAAkB,YAClBC,MAAM,EACNC,MAAO,I,EA+CTC,aAAe,SAACC,GACd,IAAIC,EAAcD,EAAEE,OAAOC,MAC3B,EAAKC,SAAS,CAAER,iBAAkBK,IAElC,IAAII,EAAO,IAAIC,EACK,cAAhBL,EACFI,EAAKV,MACFY,MAAK,SAAAC,GACJ,EAAKJ,SAAS,CAAET,IAAKa,EAAQC,UAE9BC,OAAM,SAAAZ,GAAK,OAAIhB,QAAQC,IAAIe,MAG9BO,EAAKM,aAAaV,GACfM,MAAK,SAAAC,GACJ,EAAKJ,SAAS,CAAET,IAAKa,EAAQC,UAE9BC,OAAM,SAAAZ,GAAK,OAAIhB,QAAQC,IAAIe,O,EAOlCc,YAAc,WAEZ,EAAKR,SAAS,CAAEP,MAAM,K,kEAnEH,IAAD,OAEdgB,EAAMC,KAAKC,OACfjC,QAAQC,IAAI8B,GAEZ,IAAIR,EAAO,IAAIC,EACfD,EAAKM,aAAa,IACfJ,MAAK,SAAAC,GAEJ,IADA,IAAIQ,EAAO,GACFC,EAAI,EAAGA,EAAIT,EAAQC,KAAKS,OAAQD,IACvC,IAAK,IAAIE,EAAI,EAAGA,EAAIX,EAAQC,KAAKS,OAAS,EAAGC,IACvCX,EAAQC,KAAKU,GAAGC,MAAQZ,EAAQC,KAAKU,EAAI,GAAGC,QAC9CJ,EAAOR,EAAQC,KAAKU,GACpBX,EAAQC,KAAKU,GAAKX,EAAQC,KAAKU,EAAI,GACnCX,EAAQC,KAAKU,EAAI,GAAKH,GAK5B,EAAKZ,SAAS,CAAEV,UAAWc,EAAQC,UAEpCC,OAAM,SAAAZ,GACFA,EAAMuB,SAEL,EAAKjB,SAAS,CAACN,MAAMA,EAAMuB,SAASZ,KAAKa,QAAQzB,MAAK,IAGxD,EAAKO,SAAS,CAACN,MAAMA,EAAMwB,QAAQzB,MAAK,OAI9CQ,EAAKV,MACFY,MAAK,SAAAC,GAAO,OAAI,EAAKJ,SAAS,CAAET,IAAKa,EAAQC,UAC7CC,OAAM,SAAAZ,GAAK,OAAIhB,QAAQC,IAAIe,Q,+BAwCtB,IAAD,OACP,OAEE,yBAAKhC,UAAU,kBACXgD,KAAKrB,MAAMC,UACX,yBAAK5B,UAAU,+BACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,OACb,gDACA,0BAAMA,UAAU,cACd,kBAACyD,EAAA,EAAD,CACEzD,UAAU,cACV0D,QAAQ,2BACRC,GAAG,qBACHtB,MAAOW,KAAKrB,MAAMG,iBAClB8B,SAAUZ,KAAKf,cAGf,kBAAC4B,EAAA,EAAD,CAAUxB,MAAO,aAAjB,aAECW,KAAKrB,MAAMC,WAAaoB,KAAKrB,MAAMC,UAAUkC,KAAI,SAACC,EAAKC,GACtD,OAAQ,kBAACH,EAAA,EAAD,CAAUG,IAAKA,EAAK3B,MAAO0B,EAAIE,YAAYC,MAAOH,EAAIhD,eAOtE,6BACA,yBAAKf,UAAU,iBACZgD,KAAKrB,MAAME,KACV,kBAAC,IAAMsC,SAAP,KACE,kBAAC,EAAD,CAAM3D,IAAK,oBAAqBE,MAAOsC,KAAKrB,MAAME,IAAIuC,WAAY3D,MAAOuC,KAAKrB,MAAME,IAAIyB,QACxF,kBAAC,EAAD,CAAM9C,IAAK,YAAaE,MAAOsC,KAAKrB,MAAME,IAAIwC,eAAgB5D,MAAOuC,KAAKrB,MAAME,IAAIyC,YACpF,kBAAC,EAAD,CAAM9D,IAAK,SAAUE,MAAOsC,KAAKrB,MAAME,IAAI0C,YAAa9D,MAAOuC,KAAKrB,MAAME,IAAI2C,YAKtF,yBAAKxE,UAAU,YACb,kBAACyE,EAAA,EAAD,CAAOzE,UAAU,WACf,qDACA,6BACA,yBAAKA,UAAU,oCACb,2BAAOA,UAAU,kBACf,2BAAOA,UAAU,KAEjB,+BACGgD,KAAKrB,MAAMC,WAAaoB,KAAKrB,MAAMC,UAAUkC,KAAI,SAACY,EAAUV,GAC3D,OACE,wBAAIA,IAAKA,GACP,4BAAKU,EAAS3D,SACd,4BAAK2D,EAASpB,cAS1B,4BAAQtD,UAAU,QAAQ2E,IAAK,SAAAA,GAAG,OAAI,EAAK1B,OAAS0B,QAzDnC,kBAAC,EAAD,MAmEzB,kBAACC,EAAA,EAAD,CAAU7C,KAAMiB,KAAKrB,MAAMI,KAAM8C,iBAAkB,IAAMC,QAAS9B,KAAKF,aACrE,kBAAC,EAAD,CAAOgC,QAAS9B,KAAKF,YAAaiC,SAAS,SACxC/B,KAAKrB,MAAMK,a,GA/JEgD,IAAMC,WCWjBnE,MApBf,WACI,IAAImC,EAAO,GAKX,OAJAiC,qBAAU,WACN,IAAInC,EAAIE,EACRjC,QAAQC,IAAI8B,MAGZ,kBAAC,IAAMoB,SAAP,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,IAAIC,UAAW3D,IACjC,kBAAC,IAAD,CAAO0D,KAAK,KAAKE,OAAQ,kBAAI,kBAAC,IAAD,CAAUC,GAAG,WAGlD,4BAAQvF,UAAU,QAAQ2E,IAAK,SAAAA,GAAG,OAAE1B,EAAO0B,OCFxCa,G,wLAhBb,IAAIzC,EAAIC,KAAKC,OACbjC,QAAQC,IAAI8B,K,+BAEF,IAAD,OACP,OACE,kBAAC,IAAMoB,SAAP,KACE,kBAAC,EAAD,MACA,4BAAQnE,UAAU,QAAQ2E,IAAK,SAAAA,GAAG,OAAE,EAAK1B,OAAO0B,U,GAVtCK,IAAMC,YCQJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASR,OAEL,kBAAC,EAAD,MAEFS,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdzD,OAAM,SAAAZ,GACLhB,QAAQgB,MAAMA,EAAMwB,c","file":"static/js/main.515e78b2.chunk.js","sourcesContent":["\nimport React from 'react'\nfunction Spinner(){\n    return(\n        <div className=\"container_spinner\">\n            <div className=\"spiner_circle1\"></div>\n            \n            \n        </div>\n    )\n}\nexport default Spinner\n","import React from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nfunction CardMade({ tag, total,today }) {\n\n\n    return (\n\n        <Card className=\"cardHandMade\">\n            <CardContent>\n                    <div className=\"title\">\n                    {tag}\n                    </div>\n                \n                \n                    <div className=\"title red numbers\">\n                    +{convert(today)}\n                    </div>\n\n                    <div className=\"title total\">\n                    Total {convert(total)}\n                    </div>\n               \n            </CardContent>\n\n        </Card>\n    \n    )\n}\n\n\n\nfunction convert(labelValue) {\n\n    // Nine Zeroes for Billions\n    return Math.abs(Number(labelValue)) >= 1.0e+9\n  \n    ? (Math.abs(Number(labelValue)) / 1.0e+9).toFixed(2) + \"B\"\n    // Six Zeroes for Millions \n    : Math.abs(Number(labelValue)) >= 1.0e+6\n  \n    ? (Math.abs(Number(labelValue)) / 1.0e+6).toFixed(2) + \"M\"\n    // Three Zeroes for Thousands\n    : Math.abs(Number(labelValue)) >= 1.0e+3\n  \n    ? (Math.abs(Number(labelValue)) / 1.0e+3 ).toFixed(2)+ \"K\"\n  \n    : Math.abs(Number(labelValue));\n  \n  }\n\nexport default CardMade;","export let Endpoint={};\n// Endpoint.API_SIMPLE=\"https://api.covid19api.com/summary\";\nEndpoint.API_COUNTRY=\"https://disease.sh/v3/covid-19/countries/\"\nEndpoint.API_ALL=\"https://disease.sh/v3/covid-19/all\"","import Axios from 'axios'\nimport {Endpoint} from './Endpoint'\nclass Index {\n   \n        countryParam(country){\n                console.log(country);\n                return Axios.get(Endpoint.API_COUNTRY+country)\n        }\n       \n        all(){\n                return Axios.get(Endpoint.API_ALL)\n                 \n             }\n    \n   \n  \n}\n\nexport default Index;\n","import React from 'react';\nimport Spinner from '../SpecialComponent/spinner'\nimport Card from './Card'\nimport Service from '../Services/index'\nimport Paper from '@material-ui/core/Paper';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nimport {\n  Redirect\n} from \"react-router-dom\";\nimport { Line } from \"react-chartjs-2\";\n\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nclass CovidNormal extends React.Component {\n\n  state = {\n    countries: \"\",\n    all: \"\",\n    selectedLocation: \"WorldWide\",\n    open: false,\n    error: \"\"\n  }\n\n\n  //did mount\n\n  componentDidMount() {\n\n    let ctx = this.weight;\n    console.log(ctx);\n\n    let serv = new Service();\n    serv.countryParam(\"\")\n      .then(success => {\n        let temp = {}\n        for (var i = 0; i < success.data.length; i++) {\n          for (var j = 0; j < success.data.length - 1; j++) {\n            if (success.data[j].cases < success.data[j + 1].cases) {\n              temp = success.data[j];\n              success.data[j] = success.data[j + 1]\n              success.data[j + 1] = temp;\n            }\n          }\n        }\n\n        this.setState({ countries: success.data })\n      })\n      .catch(error => {\n        if(error.response)\n          {\n            this.setState({error:error.response.data.message,open:true})\n          }\n        else{\n          this.setState({error:error.message,open:true})\n        }\n      });\n\n    serv.all()\n      .then(success => this.setState({ all: success.data }))\n      .catch(error => console.log(error));\n\n\n  }\n\n  //did mount end\n\n  //select option change\n  handleChange = (e) => {\n    let countryName = e.target.value;\n    this.setState({ selectedLocation: countryName })\n\n    let serv = new Service();\n    if (countryName === \"WorldWide\") {\n      serv.all()\n        .then(success => {\n          this.setState({ all: success.data })\n        })\n        .catch(error => console.log(error));\n    }\n    else {\n      serv.countryParam(countryName)\n        .then(success => {\n          this.setState({ all: success.data })\n        })\n        .catch(error => console.log(error));\n\n    }\n  }\n  //select option send close\n\n  //snackbar exit button\n  handleClose = () => {\n\n    this.setState({ open: false })\n  }\n  //snackbar close\n\n\n  //render\n  render() {\n    return (\n\n      <div className=\"container mt-3\">\n        {!this.state.countries ? <Spinner></Spinner> : (\n          <div className=\"row justify-content-between\">\n            <div className=\"col-md-8\">\n              <div className=\"row\">\n                <h2>COVID-19 TRACKER</h2>\n                <form className=\"form-group\">\n                  <Select\n                    className=\"select ml-3\"\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={this.state.selectedLocation}\n                    onChange={this.handleChange}\n\n                  >\n                    <MenuItem value={\"WorldWide\"}>WorldWide</MenuItem>\n\n                    {this.state.countries && this.state.countries.map((ele, key) => {\n                      return (<MenuItem key={key} value={ele.countryInfo.iso2}>{ele.country}</MenuItem>)\n                    })}\n                  </Select>\n\n                </form>\n              </div>\n\n              <br />\n              <div className=\"World-content\">\n                {this.state.all && (\n                  <React.Fragment>\n                    <Card tag={\"Coronovirus Cases\"} today={this.state.all.todayCases} total={this.state.all.cases} />\n                    <Card tag={\"Recovered\"} today={this.state.all.todayRecovered} total={this.state.all.recovered} />\n                    <Card tag={\"Deaths\"} today={this.state.all.todayDeaths} total={this.state.all.deaths} />\n                  </React.Fragment>)}\n\n              </div>\n            </div>\n            <div className=\"col-md-4\">\n              <Paper className=\"content\">\n                <h3>Live Cases by Country</h3>\n                <br />\n                <div className=\"table-container table-responsive\">\n                  <table className=\"table table-sm\">\n                    <thead className=\"\">\n                    </thead>\n                    <tbody >\n                      {this.state.countries && this.state.countries.map((elements, key) => {\n                        return (\n                          <tr key={key} >\n                            <td>{elements.country}</td>\n                            <td>{elements.cases}</td>\n                          </tr>\n                        )\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* //graph */}\n                <canvas className=\"chart\" ref={ref => this.weight = ref}>\n\n                </canvas>\n\n                {/* graph end */}\n              </Paper>\n            </div>\n\n          </div>\n        )}\n        <Snackbar open={this.state.open} autoHideDuration={6000} onClose={this.handleClose}>\n          <Alert onClose={this.handleClose} severity=\"error\">\n            {this.state.error}\n          </Alert>\n        </Snackbar>\n      </div>\n\n    );\n  }\n}\n\n\nexport default CovidNormal;\n","import {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect\n\n} from \"react-router-dom\";\n\n\nimport CovidNormal from '../component/CovidNormal'\nimport React,{useEffect} from 'react'\nfunction Index() {\n    let weight=\"\"\n    useEffect(()=>{\n        let ctx=weight;\n        console.log(ctx);\n    })\n    return (\n        <React.Fragment>\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\" component={CovidNormal}  />\n                    <Route path=\"/*\" render={()=><Redirect to=\"/\"/>}/>\n                </Switch>\n            </Router>\n            <canvas className=\"chart\" ref={ref=>weight=ref}>\n\n        </canvas>\n        </React.Fragment>\n    )\n}\nexport default Index;\n","import React from 'react';\nimport './App.css';\nimport RouterIndex from './Routes/index'\nimport Chart from 'chart.js'\nclass App extends React.Component {\n\ncomponentDidMount(){\n  let ctx=this.weight;\n  console.log(ctx);\n}\n  render() {\n    return (\n      <React.Fragment>\n        <RouterIndex />\n        <canvas className=\"chart\" ref={ref=>this.weight=ref}>\n\n        </canvas>\n      </React.Fragment>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  \n    <App />\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}