{"version":3,"sources":["SpecialComponent/spinner.js","component/Card.js","Services/Endpoint.js","Services/index.js","component/CovidNormal.js","Routes/index.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","convert","labelValue","Math","abs","Number","toFixed","CardMade","tag","total","today","Card","className","CardContent","Endpoint","Index","param","Axios","get","API_COUNTRY","API_GRAPH_ALL","Alert","props","elevation","variant","CovidNormal","state","countries","all","selectedLocation","open","error","handleChange","e","countryName","target","value","setState","Service","countryParam","then","success","data","catch","response","message","handleClose","serv","graph","dataForGraph","label","dateWiseData","cases","push","ctx","weight","Chart","type","labels","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","options","scales","yAxes","ticks","beginAtZero","temp","i","length","j","Select","labelId","id","this","onChange","MenuItem","map","ele","key","countryInfo","iso2","country","Fragment","todayCases","todayRecovered","recovered","todayDeaths","deaths","Paper","elements","ref","Snackbar","autoHideDuration","onClose","severity","React","Component","exact","path","component","render","to","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.d5b78f1d.chunk.js","sourcesContent":["\nimport React from 'react'\nfunction Spinner(){\n    return(\n        <div className=\"container_spinner\">\n            <div className=\"spiner_circle1\"></div>\n            \n            \n        </div>\n    )\n}\nexport default Spinner\n","import React from 'react'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nfunction CardMade({ tag, total,today }) {\n\n\n    return (\n\n        <Card className=\"cardHandMade\">\n            <CardContent>\n                    <div className=\"title\">\n                    {tag}\n                    </div>\n                \n                \n                    <div className={tag!==\"Recovered\"?\"red title numbers\":\"green title numbers\" }>\n                    +{convert(today)}\n                    </div>\n\n                    <div className=\"title total\">\n                    Total {convert(total)}\n                    </div>\n               \n            </CardContent>\n\n        </Card>\n    \n    )\n}\n\n\n\nfunction convert(labelValue) {\n\n    // Nine Zeroes for Billions\n    return Math.abs(Number(labelValue)) >= 1.0e+9\n  \n    ? (Math.abs(Number(labelValue)) / 1.0e+9).toFixed(2) + \"B\"\n    // Six Zeroes for Millions \n    : Math.abs(Number(labelValue)) >= 1.0e+6\n  \n    ? (Math.abs(Number(labelValue)) / 1.0e+6).toFixed(2) + \"M\"\n    // Three Zeroes for Thousands\n    : Math.abs(Number(labelValue)) >= 1.0e+3\n  \n    ? (Math.abs(Number(labelValue)) / 1.0e+3 ).toFixed(2)+ \"K\"\n  \n    : Math.abs(Number(labelValue));\n  \n  }\n\nexport default CardMade;","export let Endpoint={};\n\nEndpoint.API_COUNTRY=\"https://disease.sh/v3/covid-19/\"\n\nEndpoint.API_GRAPH_ALL=\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"","import Axios from 'axios'\nimport {Endpoint} from './Endpoint'\nclass Index {\n   \n       \n       \n        countryParam(param){\n                return Axios.get(Endpoint.API_COUNTRY+param)\n                 \n             }\n        graph(){\n                return Axios.get(Endpoint.API_GRAPH_ALL)\n        }\n   \n  \n}\n\nexport default Index;\n","\nimport React from 'react';\nimport Spinner from '../SpecialComponent/spinner'\nimport Card from './Card'\nimport Service from '../Services/index'\nimport Paper from '@material-ui/core/Paper';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Chart from 'chart.js'\n\n\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nclass CovidNormal extends React.Component {\n\n  state = {\n    countries: \"\",\n    all: \"\",\n    selectedLocation: \"WorldWide\",\n    open: false,\n    error: \"\",\n  }\n\n\n\n\n  //did mount\n  componentDidMount() {\n\n    //Initialise Service\n    let serv = new Service();\n    //Graph Service\n    serv.graph()\n      .then(data => {\n        let dataForGraph = [];\n        let label = []\n        for (let dateWiseData in data.data.cases) {\n          dataForGraph.push(data.data.cases[dateWiseData])\n          label.push(dateWiseData)\n        }\n\n        let ctx = this.weight;\n        if (ctx) {\n          new Chart(ctx, {\n            type: 'bar',\n            data: {\n              labels: label,\n              datasets: [{\n                label: 'Cases',\n                data: dataForGraph,\n                backgroundColor: 'rgba(0,0,0, 0.2)',\n                borderColor: 'rgba(0,0,2, 1)',\n                borderWidth: 1,\n                hoverBackgroundColor: 'rgba(0,0,0,1)'\n              }\n              ]\n            },\n            options: {\n              scales: {\n                yAxes: [{\n                  ticks: {\n                    beginAtZero: false\n                  }\n                }]\n              }\n            }\n          });\n        }\n\n      })\n      .catch(error => {\n        if (error.response) {\n          this.setState({ error: error.response.data.message, open: true })\n        }\n        else {\n          this.setState({ error: error.message, open: true })\n        }\n      })\n\n\n\n    //Bringing All counties statistics Service\n    serv.countryParam(\"countries\")\n      .then(success => {\n        let temp = {}\n        for (var i = 0; i < success.data.length; i++) {\n          for (var j = 0; j < success.data.length - 1; j++) {\n            if (success.data[j].cases < success.data[j + 1].cases) {\n              temp = success.data[j];\n              success.data[j] = success.data[j + 1]\n              success.data[j + 1] = temp;\n            }\n          }\n        }\n\n        this.setState({ countries: success.data })\n      })\n      .catch(error => {\n        if (error.response) {\n          this.setState({ error: error.response.data.message, open: true })\n        }\n        else {\n          this.setState({ error: error.message, open: true })\n        }\n      });\n\n\n    //Bringing World Wide Data Service Call\n    serv.countryParam(\"all\")\n      .then(success => this.setState({ all: success.data }))\n      .catch(error => {\n        if (error.response) {\n          this.setState({ error: error.response.data.message, open: true })\n        }\n        else {\n          this.setState({ error: error.message, open: true })\n        }\n      });\n\n\n  }\n\n  //did mount end\n\n\n\n\n  //select option change\n  handleChange = (e) => {\n\n    let countryName = e.target.value;\n    this.setState({ selectedLocation: countryName })\n    let serv = new Service();\n    let param = (countryName === \"WorldWide\") ? \"all\" : \"countries/\" + countryName\n    serv.countryParam(param)\n      .then(success => {\n        this.setState({ all: success.data })\n      })\n      .catch(error => {\n        if (error.response) {\n          this.setState({ error: error.response.data.message, open: true })\n        }\n        else {\n          this.setState({ error: error.message, open: true })\n        }\n      });\n\n\n\n  }\n  //select option send close\n\n\n\n\n\n  //snackbar exit button\n  handleClose = () => {\n\n    this.setState({ open: false })\n  }\n  //snackbar close\n\n\n  //render\n  render() {\n    //console.log(\"render\");\n    return (\n\n      <div className=\"container-fluid mt-3\">\n        <div className=\"row justify-content-between\">\n          <div className=\"col-md-8\">\n            <div className=\"row\">\n             \n              <h2 className=\"col-md-8\">COVID-19 TRACKER</h2>\n              \n            \n              <form className=\"form-group offset-md-1 col-md-3 \">\n                <Select\n                  className=\"select ml-3\"\n                  labelId=\"demo-simple-select-label\"\n                  id=\"demo-simple-select\"\n                  value={this.state.selectedLocation}\n                  onChange={this.handleChange}\n                >\n                  <MenuItem value={\"WorldWide\"}>WorldWide</MenuItem>\n                  {this.state.countries && this.state.countries.map((ele, key) => {\n                    return (<MenuItem key={key} value={ele.countryInfo.iso2}>{ele.country}</MenuItem>)\n                  })}\n                </Select>\n              </form>\n            </div>\n            <br />\n            <div className=\"World-content\">\n              {this.state.all && (\n                <React.Fragment>\n                  <Card tag={\"Coronovirus Cases\"} today={this.state.all.todayCases} total={this.state.all.cases} />\n                  <Card tag={\"Recovered\"} today={this.state.all.todayRecovered} total={this.state.all.recovered} />\n                  <Card tag={\"Deaths\"} today={this.state.all.todayDeaths} total={this.state.all.deaths} />\n                </React.Fragment>)}\n\n            </div>\n          </div>\n          <div className=\"col-md-4\">\n            <Paper className=\"content\">\n              <h3>Live Cases by Country</h3>\n              <br />\n              <div className=\"table-container table-responsive\">\n                <table className=\"table table-sm\">\n                  <thead className=\"\">\n                  </thead>\n                  <tbody >\n                    {this.state.countries && this.state.countries.map((elements, key) => {\n                      return (\n                        <tr key={key} >\n                          <td>{elements.country}</td>\n                          <td>{elements.cases}</td>\n                        </tr>\n                      )\n                    })}\n                  </tbody>\n                </table>\n              </div>\n              <canvas className=\"chart\" ref={ref => this.weight = ref}></canvas>\n            </Paper>\n          </div>\n\n        </div>\n\n        <Snackbar open={this.state.open} autoHideDuration={6000} onClose={this.handleClose}>\n          <Alert onClose={this.handleClose} severity=\"error\">\n            {this.state.error}\n          </Alert>\n        </Snackbar>\n      </div>\n\n    );\n  }\n}\n\n\nexport default CovidNormal;\n\n","import {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect\n\n} from \"react-router-dom\";\n\n\nimport CovidNormal from '../component/CovidNormal'\nimport React from 'react'\nfunction Index() {\n    \n    return (\n        <React.Fragment>\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\" component={CovidNormal}  />\n                    <Route path=\"/*\" render={()=><Redirect to=\"/\"/>}/>\n                </Switch>\n            </Router>\n        </React.Fragment>\n    )\n}\nexport default Index;\n","import React from 'react';\nimport './App.css';\nimport RouterIndex from './Routes/index'\nclass App extends React.Component {\n\n\n  render() {\n    return (\n      <React.Fragment>\n        <RouterIndex />\n      </React.Fragment>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  \n    <App />\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}