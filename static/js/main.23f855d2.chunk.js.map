{"version":3,"sources":["SpecialComponent/spinner.js","component/Card.js","Services/Endpoint.js","Services/index.js","component/CovidNormal.js","Routes/index.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","convert","labelValue","Math","abs","Number","toFixed","CardMade","tag","total","today","Card","className","CardContent","Endpoint","Index","param","Axios","get","API_COUNTRY","API_GRAPH_ALL","Alert","props","elevation","variant","CovidNormal","state","countries","all","selectedLocation","open","error","handleChange","e","countryName","target","value","setState","Service","countryParam","then","success","data","catch","response","message","handleClose","serv","graph","dataForGraph","label","dateWiseData","cases","push","ctx","weight","Chart","type","labels","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","options","scales","yAxes","ticks","beginAtZero","temp","i","length","j","Select","labelId","id","this","onChange","MenuItem","map","ele","key","countryInfo","iso2","country","Fragment","todayCases","todayRecovered","recovered","todayDeaths","deaths","Paper","elements","ref","Snackbar","autoHideDuration","onClose","severity","React","Component","exact","path","component","render","to","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.23f855d2.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nfunction Spinner(){\r\n    return(\r\n        <div className=\"container_spinner\">\r\n            <div className=\"spiner_circle1\"></div>\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default Spinner\r\n","import React from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nfunction CardMade({ tag, total,today }) {\r\n\r\n\r\n    return (\r\n\r\n        <Card className=\"cardHandMade\">\r\n            <CardContent>\r\n                    <div className=\"title\">\r\n                    {tag}\r\n                    </div>\r\n                \r\n                \r\n                    <div className={tag!==\"Recovered\"?\"red title numbers\":\"green title numbers\" }>\r\n                    +{convert(today)}\r\n                    </div>\r\n\r\n                    <div className=\"title total\">\r\n                    Total {convert(total)}\r\n                    </div>\r\n               \r\n            </CardContent>\r\n\r\n        </Card>\r\n    \r\n    )\r\n}\r\n\r\n\r\n\r\nfunction convert(labelValue) {\r\n\r\n    // Nine Zeroes for Billions\r\n    return Math.abs(Number(labelValue)) >= 1.0e+9\r\n  \r\n    ? (Math.abs(Number(labelValue)) / 1.0e+9).toFixed(2) + \"B\"\r\n    // Six Zeroes for Millions \r\n    : Math.abs(Number(labelValue)) >= 1.0e+6\r\n  \r\n    ? (Math.abs(Number(labelValue)) / 1.0e+6).toFixed(2) + \"M\"\r\n    // Three Zeroes for Thousands\r\n    : Math.abs(Number(labelValue)) >= 1.0e+3\r\n  \r\n    ? (Math.abs(Number(labelValue)) / 1.0e+3 ).toFixed(2)+ \"K\"\r\n  \r\n    : Math.abs(Number(labelValue));\r\n  \r\n  }\r\n\r\nexport default CardMade;","export let Endpoint={};\r\n\r\nEndpoint.API_COUNTRY=\"https://disease.sh/v3/covid-19/\"\r\n\r\nEndpoint.API_GRAPH_ALL=\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"","import Axios from 'axios'\r\nimport {Endpoint} from './Endpoint'\r\nclass Index {\r\n   \r\n       \r\n       \r\n        countryParam(param){\r\n                return Axios.get(Endpoint.API_COUNTRY+param)\r\n                 \r\n             }\r\n        graph(){\r\n                return Axios.get(Endpoint.API_GRAPH_ALL)\r\n        }\r\n   \r\n  \r\n}\r\n\r\nexport default Index;\r\n","\r\nimport React from 'react';\r\nimport Spinner from '../SpecialComponent/spinner'\r\nimport Card from './Card'\r\nimport Service from '../Services/index'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Chart from 'chart.js'\r\n\r\n\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nclass CovidNormal extends React.Component {\r\n\r\n  state = {\r\n    countries: \"\",\r\n    all: \"\",\r\n    selectedLocation: \"WorldWide\",\r\n    open: false,\r\n    error: \"\",\r\n  }\r\n\r\n\r\n\r\n\r\n  //did mount\r\n  componentDidMount() {\r\n\r\n    //Initialise Service\r\n    let serv = new Service();\r\n    //Graph Service\r\n    serv.graph()\r\n      .then(data => {\r\n        let dataForGraph = [];\r\n        let label = []\r\n        for (let dateWiseData in data.data.cases) {\r\n          dataForGraph.push(data.data.cases[dateWiseData])\r\n          label.push(dateWiseData)\r\n        }\r\n\r\n        let ctx = this.weight;\r\n        if (ctx) {\r\n          new Chart(ctx, {\r\n            type: 'bar',\r\n            data: {\r\n              labels: label,\r\n              datasets: [{\r\n                label: 'Cases',\r\n                data: dataForGraph,\r\n                backgroundColor: 'rgba(0,0,0, 0.2)',\r\n                borderColor: 'rgba(0,0,2, 1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(0,0,0,1)'\r\n              }\r\n              ]\r\n            },\r\n            options: {\r\n              scales: {\r\n                yAxes: [{\r\n                  ticks: {\r\n                    beginAtZero: false\r\n                  }\r\n                }]\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n      })\r\n      .catch(error => {\r\n        if (error.response) {\r\n          this.setState({ error: error.response.data.message, open: true })\r\n        }\r\n        else {\r\n          this.setState({ error: error.message, open: true })\r\n        }\r\n      })\r\n\r\n\r\n\r\n    //Bringing All counties statistics Service\r\n    serv.countryParam(\"countries\")\r\n      .then(success => {\r\n        let temp = {}\r\n        for (var i = 0; i < success.data.length; i++) {\r\n          for (var j = 0; j < success.data.length - 1; j++) {\r\n            if (success.data[j].cases < success.data[j + 1].cases) {\r\n              temp = success.data[j];\r\n              success.data[j] = success.data[j + 1]\r\n              success.data[j + 1] = temp;\r\n            }\r\n          }\r\n        }\r\n\r\n        this.setState({ countries: success.data })\r\n      })\r\n      .catch(error => {\r\n        if (error.response) {\r\n          this.setState({ error: error.response.data.message, open: true })\r\n        }\r\n        else {\r\n          this.setState({ error: error.message, open: true })\r\n        }\r\n      });\r\n\r\n\r\n    //Bringing World Wide Data Service Call\r\n    serv.countryParam(\"all\")\r\n      .then(success => this.setState({ all: success.data }))\r\n      .catch(error => {\r\n        if (error.response) {\r\n          this.setState({ error: error.response.data.message, open: true })\r\n        }\r\n        else {\r\n          this.setState({ error: error.message, open: true })\r\n        }\r\n      });\r\n\r\n\r\n  }\r\n\r\n  //did mount end\r\n\r\n\r\n\r\n\r\n  //select option change\r\n  handleChange = (e) => {\r\n\r\n    let countryName = e.target.value;\r\n    this.setState({ selectedLocation: countryName })\r\n    let serv = new Service();\r\n    let param = (countryName === \"WorldWide\") ? \"all\" : \"countries/\" + countryName\r\n    serv.countryParam(param)\r\n      .then(success => {\r\n        this.setState({ all: success.data })\r\n      })\r\n      .catch(error => {\r\n        if (error.response) {\r\n          this.setState({ error: error.response.data.message, open: true })\r\n        }\r\n        else {\r\n          this.setState({ error: error.message, open: true })\r\n        }\r\n      });\r\n\r\n\r\n\r\n  }\r\n  //select option send close\r\n\r\n\r\n\r\n\r\n\r\n  //snackbar exit button\r\n  handleClose = () => {\r\n\r\n    this.setState({ open: false })\r\n  }\r\n  //snackbar close\r\n\r\n\r\n  //render\r\n  render() {\r\n    //console.log(\"render\");\r\n    return (\r\n\r\n      <div className=\"container-fluid mt-3\">\r\n        <div className=\"row justify-content-between\">\r\n          <div className=\"col-md-8\">\r\n            <div className=\"row\">\r\n             \r\n              <h2 className=\"col-md-8\">COVID-19 TRACKER</h2>\r\n              \r\n            \r\n              <form className=\"form-group offset-md-1 col-md-3 \">\r\n                <Select\r\n                  className=\"select ml-3\"\r\n                  labelId=\"demo-simple-select-label\"\r\n                  id=\"demo-simple-select\"\r\n                  value={this.state.selectedLocation}\r\n                  onChange={this.handleChange}\r\n                >\r\n                  <MenuItem value={\"WorldWide\"}>WorldWide</MenuItem>\r\n                  {this.state.countries && this.state.countries.map((ele, key) => {\r\n                    return (<MenuItem key={key} value={ele.countryInfo.iso2}>{ele.country}</MenuItem>)\r\n                  })}\r\n                </Select>\r\n              </form>\r\n            </div>\r\n            <br />\r\n            <div className=\"World-content\">\r\n              {this.state.all && (\r\n                <React.Fragment>\r\n                  <Card tag={\"Coronovirus Cases\"} today={this.state.all.todayCases} total={this.state.all.cases} />\r\n                  <Card tag={\"Recovered\"} today={this.state.all.todayRecovered} total={this.state.all.recovered} />\r\n                  <Card tag={\"Deaths\"} today={this.state.all.todayDeaths} total={this.state.all.deaths} />\r\n                </React.Fragment>)}\r\n\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <Paper className=\"content\">\r\n              <h3>Live Cases by Country</h3>\r\n              <br />\r\n              <div className=\"table-container table-responsive\">\r\n                <table className=\"table table-sm\">\r\n                  <thead className=\"\">\r\n                  </thead>\r\n                  <tbody >\r\n                    {this.state.countries && this.state.countries.map((elements, key) => {\r\n                      return (\r\n                        <tr key={key} >\r\n                          <td>{elements.country}</td>\r\n                          <td>{elements.cases}</td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <br/>\r\n              <h4>WorldWide New Cases</h4>\r\n              <canvas className=\"chart\" ref={ref => this.weight = ref}></canvas>\r\n            </Paper>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <Snackbar open={this.state.open} autoHideDuration={6000} onClose={this.handleClose}>\r\n          <Alert onClose={this.handleClose} severity=\"error\">\r\n            {this.state.error}\r\n          </Alert>\r\n        </Snackbar>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default CovidNormal;\r\n\r\n","import {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n\r\n} from \"react-router-dom\";\r\n\r\n\r\nimport CovidNormal from '../component/CovidNormal'\r\nimport React from 'react'\r\nfunction Index() {\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={CovidNormal}  />\r\n                    <Route path=\"/*\" render={()=><Redirect to=\"/\"/>}/>\r\n                </Switch>\r\n            </Router>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default Index;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport RouterIndex from './Routes/index'\r\nclass App extends React.Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <RouterIndex />\r\n      </React.Fragment>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\r\n\r\nReactDOM.render(\r\n  \r\n    <App />\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}